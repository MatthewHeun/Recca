% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/energy_to_exergy.R
\name{extend_fu_details_to_exergy}
\alias{extend_fu_details_to_exergy}
\title{Extend the final-to-useful details matrices from energy to exergy}
\usage{
extend_fu_details_to_exergy(
  .fu_details_mats = NULL,
  Y_fu_details = Recca::psut_cols$Y_fu_details,
  U_eiou_fu_details = Recca::psut_cols$U_eiou_fu_details,
  clean_up_df = TRUE,
  phi = Recca::psut_cols$phi,
  .exergy_suffix = "_exergy",
  mat_piece = "noun",
  phi_piece = "all",
  energy_type = Recca::psut_cols$energy_type,
  mat_col_notation = RCLabels::from_notation,
  mat_colname_preposition =
    RCLabels::prepositions_list[[which(RCLabels::prepositions_list == "from")]],
  Y_fu_details_colname = Recca::psut_cols$Y_fu_details,
  U_eiou_fu_details_colname = Recca::psut_cols$U_eiou_fu_details,
  phi_colname = Recca::psut_cols$phi,
  energy = Recca::energy_types$e,
  exergy = Recca::energy_types$x,
  industry_type = IEATools::row_col_types$industry,
  product_type = IEATools::row_col_types$product
)
}
\arguments{
\item{.fu_details_mats}{A data frame containing details matrices.}

\item{Y_fu_details}{The name of the column of \code{fu_details_mats} containing details matrices or a details matrix.}

\item{U_eiou_fu_details}{The name of the column of \code{fu_details_mats} containing details matrices or a details matrix.}

\item{clean_up_df}{When \code{.fu_details_mats} is a data frame, tells whether to \code{tidyr::pivot_longer()} the result,
remove no-longer-needed input column \code{phi}, and
fill the \code{energy_type} column with "X" for the exergy versions of the ECC matrices.
Default is \code{TRUE}.}

\item{phi}{The name of the column of \code{fu_details_mats} containing phi vectors or a phi vector.}

\item{.exergy_suffix}{The string suffix to be appended to exergy versions of ECC matrices.}

\item{mat_piece}{The piece of details matrix column names
which are to be matched against names in the \code{phi} vector.
Default is "noun", meaning that the part before " [from XYZ]" will be matched.}

\item{phi_piece}{The piece of names in the \code{phi} vector against which
column names for the details matrices
are to be matched.
Default is "all", meaning that entire names are to be matched.}

\item{energy_type}{The name of the Energy.type column in \code{.fu_details_mats}.
Default is \code{Recca::psut_cols$energy_type}.}

\item{mat_col_notation}{The notation for the column labels of the details matrices.
Default is \code{RCLabels::from_notation}.}

\item{mat_colname_preposition}{The prepositions to be used for details matrix column notation.
Default is \code{RCLabels::prepositions_list[[which(RCLabels::prepositions_list == "from")]]}.}

\item{Y_fu_details_colname}{The name of the column in \code{.fu_details_mats} containing \code{Y_fu_details} matrices.}

\item{U_eiou_fu_details_colname}{The name of the column in \code{.fu_details_mats} containing \code{U_EIOU_fu_details} matrices.}

\item{phi_colname}{The name of the column in \code{.fu_details_mats} containing \code{phi} vectors.}

\item{energy, exergy}{String representing energy and exergy in the \code{energy_type} column.
Defaults are \code{Recca::energy_types$e} and \code{Recca::energy_types$x}, respectively.}

\item{industry_type, product_type}{Industry and product row and column types.
Defaults are \code{IEATools::row_col_types$industry} and \code{IEATools::row_col_types$product}, respectively.}
}
\value{
A version of \code{.fu_details_mats} containing details matrices in exergy terms.
}
\description{
The details matrices contain (in row and column names)
details about the move from the final energy stage to
the useful energy stage.
Four pieces of information are provided in row and column names:
\itemize{
\item final energy product,
\item final demand sector,
\item useful energy product, and
\item final-to-useful machine.
}
}
\details{
Two details matrices are available:
\itemize{
\item \code{Y_fu_details} and
\item \code{U_EIOU_fu_details}.
}

The two matrices correspond to the two ways in which final energy
is converted into useful energy:
in final demand (\code{Y_fu_details}) and
in energy industry own use (\code{U_EIOU_fu_details}).

The format for the row and column names for both details matrices is identical:
\itemize{
\item row names
\itemize{
\item \code{RCLabels::arrow_notation}
\item prefix: final energy product
\item suffix: final demand sector
\item example: "Aviation gasoline -> Domestic aviation"
}
\item column names
\itemize{
\item \code{RCLabels::from_notation}
\item noun: useful energy product
\item object of from: final-to-useful machine
\item example: "HPL [from Electric pumps]"
}
}

The row and column types match
the row and column names.
\itemize{
\item row types
\itemize{
\item \code{RCLabels::arrow_notation}
\item prefix: "Product"
\item suffix: "Industry"
\item specifically: "Product -> Industry"
}
\item column types
\itemize{
\item \code{RCLabels::from_notation}
\item noun: "Product"
\item object of from: "Industry"
\item specifically: "Product [from Industry]"
}
}

The energy stage of the entries in the details matrices are indicated
by the entry in the \code{Energy.type} column,
typically "Useful".

If either of the energy details matrices are \code{NULL},
the exergy matrix returned from this function is also \code{NULL}.
}
\examples{
details_mat <- Matrix::sparseMatrix(
  i = c(1, 2, 3),
  j = c(1, 3, 2),
  x = c(10, 20, 100),
  dimnames = list(c("Electricity -> Households",
                    "Electricity -> Industry",
                    "Natural gas -> Households"),
                  c("Light [from Electric lamps]",
                    "MTH.100.C [from Furnaces]",
                    "KE [from Fans]"))) |>
  matsbyname::setrowtype("Product -> Industry") |>
  matsbyname::setcoltype("Product [from Industry]")
phi_vec <- Matrix::sparseMatrix(
  i = c(1, 2, 3, 4),
  j = c(1, 1, 1, 1),
  x = c(1.0, 1-(25+273.15)/(100+273.15), 0.96, 1-(25+273.15)/(1000+273.15)),
  dimnames = list(c("KE", "MTH.100.C", "Light", "HTH.1000.C"),
                  "phi")) |>
  matsbyname::setrowtype("Product") |>
  matsbyname::setcoltype("phi")
extend_fu_details_to_exergy(Y_fu_details = details_mat,
                            U_eiou_fu_details = details_mat,
                            phi = phi_vec)
}
