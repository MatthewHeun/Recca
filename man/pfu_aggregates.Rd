% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pfu_aggregates.R
\name{pfu_aggregates}
\alias{pfu_aggregates}
\title{Aggregate to primary, final, and useful stages}
\usage{
pfu_aggregates(
  .sutdata,
  p_industries,
  fd_sectors,
  by = c("Total", "Product", "Industry", "Flow"),
  add_net_gross_cols = FALSE,
  piece = "all",
  notation = RCLabels::notations_list,
  pattern_type = c("exact", "leading", "trailing", "anywhere", "literal"),
  prepositions = RCLabels::prepositions_list,
  net_aggregate_primary = Recca::aggregate_cols$net_aggregate_primary,
  gross_aggregate_primary = Recca::aggregate_cols$gross_aggregate_primary,
  net_aggregate_final = Recca::aggregate_cols$net_aggregate_final,
  gross_aggregate_final = Recca::aggregate_cols$gross_aggregate_final,
  net_aggregate_useful = Recca::aggregate_cols$net_aggregate_useful,
  gross_aggregate_useful = Recca::aggregate_cols$gross_aggregate_useful,
  net_aggregate_services = Recca::aggregate_cols$net_aggregate_services,
  gross_aggregate_services = Recca::aggregate_cols$gross_aggregate_services,
  last_stage = Recca::psut_cols$last_stage,
  primary = Recca::all_stages$primary,
  final = Recca::all_stages$final,
  useful = Recca::all_stages$useful,
  services = Recca::all_stages$services,
  sep = Recca::all_stages$last_stage_sep,
  R = Recca::psut_cols$R,
  U = Recca::psut_cols$U,
  U_feed = Recca::psut_cols$U_feed,
  U_eiou = Recca::psut_cols$U_eiou,
  r_eiou = Recca::psut_cols$r_eiou,
  V = Recca::psut_cols$V,
  Y = Recca::psut_cols$Y,
  S_units = Recca::psut_cols$S_units,
  R_lsfinal = paste0(Recca::psut_cols$R, sep, final),
  U_lsfinal = paste0(Recca::psut_cols$U, sep, final),
  U_feed_lsfinal = paste0(Recca::psut_cols$U_feed, sep, final),
  U_eiou_lsfinal = paste0(Recca::psut_cols$U_eiou, sep, final),
  r_eiou_lsfinal = paste0(Recca::psut_cols$r_eiou, sep, final),
  V_lsfinal = paste0(Recca::psut_cols$V, sep, final),
  Y_lsfinal = paste0(Recca::psut_cols$Y, sep, final),
  S_units_lsfinal = paste0(Recca::psut_cols$S_units, sep, final),
  R_lsuseful = paste0(Recca::psut_cols$R, sep, useful),
  U_lsuseful = paste0(Recca::psut_cols$U, sep, useful),
  U_feed_lsuseful = paste0(Recca::psut_cols$U_feed, sep, useful),
  U_eiou_lsuseful = paste0(Recca::psut_cols$U_eiou, sep, useful),
  r_eiou_lsuseful = paste0(Recca::psut_cols$r_eiou, sep, useful),
  V_lsuseful = paste0(Recca::psut_cols$V, sep, useful),
  Y_lsuseful = paste0(Recca::psut_cols$Y, sep, useful),
  S_units_lsuseful = paste0(Recca::psut_cols$S_units, sep, useful),
  R_lsservices = paste0(Recca::psut_cols$R, sep, services),
  U_lsservices = paste0(Recca::psut_cols$U, sep, services),
  U_feed_lsservices = paste0(Recca::psut_cols$U_feed, sep, services),
  U_eiou_lsservices = paste0(Recca::psut_cols$U_eiou, sep, services),
  r_eiou_lsservices = paste0(Recca::psut_cols$r_eiou, sep, services),
  V_lsservices = paste0(Recca::psut_cols$V, sep, services),
  Y_lsservices = paste0(Recca::psut_cols$Y, sep, services),
  S_units_lsservices = paste0(Recca::psut_cols$S_units, sep, services),
  .matnames = Recca::psut_cols$matnames,
  .matvals = Recca::psut_cols$matvals,
  tol = 1e-06
)
}
\arguments{
\item{.sutdata}{An optional data frame containing physical supply use table
descriptions of energy conversion chains.}

\item{p_industries}{A string vector of primary industries.}

\item{fd_sectors}{A string vector of final demand sectors.}

\item{by}{Tells how to aggregate, one of "Total", "Product", "Industry", or "Flow".
Default is "Total".}

\item{add_net_gross_cols}{A boolean that tells whether to include net and gross columns
for primary energy aggregation.
Default is \code{FALSE}.}

\item{piece}{Tells which piece of row and column labels to use for
aggregation decision.
Default is "all".}

\item{notation}{Tells which notation is used for row and column labels.
Default is \code{RCLabels::notations_list}.}

\item{pattern_type}{Tells how to match row and column names.
One of "exact", "leading", "trailing", "anywhere", or "literal".
Default is "exact".}

\item{prepositions}{The list of prepositions for row and column labels.
Default is \code{RCLabels::prepositions_list}.}

\item{net_aggregate_primary, gross_aggregate_primary, net_aggregate_final, gross_aggregate_final, net_aggregate_useful, gross_aggregate_useful, net_aggregate_services, gross_aggregate_services}{See \code{Recca::aggregate_cols}.}

\item{last_stage}{Name of the last stage column. Default is \code{Recca::psut_cols$last_stage}.}

\item{primary, final, useful, services}{String identifiers for ECC stages. See \code{Recca::all_stages}.}

\item{sep}{The string separator identifying the last stage in the ECC.
Default is \code{Recca::all_stages$last_stage_sep}.}

\item{R, U, U_feed, U_eiou, r_eiou, V, Y, S_units}{Names for columns containing matrices.
See \code{Recca::psut_cols}.}

\item{R_lsfinal, U_lsfinal, U_feed_lsfinal, U_eiou_lsfinal, r_eiou_lsfinal, V_lsfinal, Y_lsfinal, S_units_lsfinal}{Names for columns when last stage is final energy.
Defaults are unmodified column names concatenated with \code{sep}
and \code{final}.}

\item{R_lsuseful, U_lsuseful, U_feed_lsuseful, U_eiou_lsuseful, r_eiou_lsuseful, V_lsuseful, Y_lsuseful, S_units_lsuseful}{Names for columns when last stage is useful energy.
Defaults are unmodified column names concatenated with \code{sep}
and \code{useful}.}

\item{R_lsservices, U_lsservices, U_feed_lsservices, U_eiou_lsservices, r_eiou_lsservices, V_lsservices, Y_lsservices, S_units_lsservices}{Names for columns when last stage is energy services.
Defaults are unmodified column names concatenated with \code{sep}
and \code{services}.}

\item{.matnames, .matvals}{Names of columns used internally.
Defaults are from \code{Recca::psut_cols}.}

\item{tol}{The allowable energy imbalance in the units of energy flows.
Default is \code{1e-6}.}
}
\value{
A data frame of primary, final, and useful aggregates.
}
\description{
Calculate aggregates at all possible ECC stages
(primary, final, and useful),
regardless of whether the last stage is final or useful.
See details for the approach.
Note that services aggregations are often inherently problematic,
because energy services are often quantified in different units.
This functions does not perform
aggregation to services.
Users are referred to \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}}
for aggregation to services, if desired and sensible.
}
\details{
There are several ways to aggregate energy conversion chain (ECC) data
to primary, final, or useful stages of the ECC.
\code{\link[=primary_aggregates]{primary_aggregates()}} aggregates primary energy using the
resource (\strong{R}), make (\strong{V}), and final demand (\strong{Y}) matrices.
\code{\link[=primary_aggregates]{primary_aggregates()}} gives upstream (source) aggregations for an ECC.
\code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}} aggregates to the last stage
of an energy conversion chain using \strong{R} and \strong{Y} matrices,
regardless of whether the last stage is final, useful, or services.
\code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}} gives downstream (sink) aggregations.

However, applying \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}} to an ECC
whose last stage is final cannot produce useful stage aggregations.
Similarly, applying \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}} to an ECC whose last stage is useful
cannot provide final stage aggregations.
See the following table.\tabular{lll}{
   ECC last stage --> \tab Final \tab Useful \cr
   Desired aggregation stage \tab  \tab  \cr
   Primary \tab \code{\link[=primary_aggregates]{primary_aggregates()}} Note A \tab \code{\link[=primary_aggregates]{primary_aggregates()}} Note A \cr
   Final \tab \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}} \tab Note B \cr
   Useful \tab Note C \tab \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}} \cr
}


For the off-axis aggregations, special considerations are employed in this function.

Note A:

The two results from \code{\link[=primary_aggregates]{primary_aggregates()}}
should be equal to within \code{tol}.
If agreement is not observed, an error is given.

Note B:

When last stage is useful but we want final stage aggregations
and final-to-useful stage efficiencies,
we can again employ \code{\link[=calc_eta_fu_Y_eiou]{calc_eta_fu_Y_eiou()}} in an inverse
relationship to calculate final stage aggregates when
useful stage information is known.
The result is \strong{Y} and \strong{U_EIOU} matrices
of same structure as \strong{Y_Useful} and \strong{U_EIOU_Useful} but containing
final stage data.
These final-but-in-same-structure-as-useful matrices
can be used to calculate final aggregations when last stage is useful.

Note C:

When last stage is final but we want useful energy aggregates
and final-to-useful efficiencies,
we can employ \code{\link[=calc_eta_fu_Y_eiou]{calc_eta_fu_Y_eiou()}} to calculate
useful energy for each piece of final demand or EIOU
when last stage is final, giving \strong{Y} and \strong{U_EIOU}
matrices with same structure as \strong{Y_Final} and \strong{U_EIOU_Final}
except containing useful energy data.
These useful-but-in-same-structure-as-final matrices
can be used to calculate useful aggregations when last stage is final.

Whereas \code{\link[=primary_aggregates]{primary_aggregates()}} and \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}}
work independently of the last stage of an ECC,
this function requires both final and useful last stage ECCs
to be present in \code{.sutdata}.
Any data with last state of services are ignored in this function.

Suffixes to matrix names are assumed to indicate the last stage
of the ECC for which the matrix applies.
For example, two versions of the \strong{R} matrix should be present:
\code{R_final} and \code{R_useful}.

If \code{.sutdata} is a wide-by-matrices data frame
but contains a \code{last_stage} column,
\code{.sutdata} is pivoted wide (as a convenience)
to put data into the correct shape,
forming columns for each combination of ECC matrix and last stage.
The \code{last_stage} and \code{R} columns make \code{R_final} and \code{R_useful} columns.
The \code{last_stage} and \code{V} columns make \code{V_final} and \code{V_useful} columns.
Etc.
If either the last stage final or the last stage useful ECC representations
is missing, an error is thrown.
See examples.

Internally, this function uses
\code{\link[=primary_aggregates]{primary_aggregates()}} and \code{\link[=finaldemand_aggregates]{finaldemand_aggregates()}}, and
to complete its work.

Primary aggregates can be computed when
last stage is final, useful, or services.
Ostensibly, the primary aggregates should be the same
in all cases when metadata are the same.
An error is thrown if that is not true to within \code{tol}.
}
\examples{
p_industries <- c("Resources [of Crude]", "Resources [of NG]")
fd_sectors <- c("Residential", "Transport", "Oil fields")
# Primary TOTAL aggregates
UKEnergy2000mats |>
  tidyr::pivot_wider(names_from = matrix.name, values_from = matrix) |>
  # Eliminate the case when last_stage == "Final"
  dplyr::filter(.data[[Recca::psut_cols$last_stage]] != "Final") |>
  pfu_aggregates(p_industries = p_industries, fd_sectors = fd_sectors,
  by = "Total")
}
