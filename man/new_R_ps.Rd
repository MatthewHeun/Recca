% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reconstruct.R
\name{new_R_ps}
\alias{new_R_ps}
\title{Assess the effect of new levels of resources}
\usage{
new_R_ps(.sutdata = NULL, R_prime_colname = "R_prime",
  U_colname = "U", V_colname = "V", Y_colname = "Y",
  S_units_colname = "S_units", q_colname = "q", C_colname = "C",
  eta_i_colname = "eta_i", maxiter = 100, tol = 1e-06,
  U_prime_colname = "U_prime", V_prime_colname = "V_prime",
  Y_Prime_colname = "Y_prime")
}
\arguments{
\item{.sutdata}{a data frame of supply-use table matrices with matrices arranged in columns.}

\item{R_prime_colname}{the name of an input column in \code{.sutdata} containing a new resource matrix for the ECC.}

\item{U_colname}{the name of a column in \code{.sutdata} containing \code{U} matrices for the base ECC.  Default is "\code{U}".}

\item{V_colname}{the name of a column in \code{.sutdata} containing \code{V} matrices for the base ECC.  Default is "\code{V}".}

\item{Y_colname}{the name of a column in \code{.sutdata} containing \code{Y} matrices for the base ECC.  Default is "\code{Y}".}

\item{S_units_colname}{the name of a column in \code{.sutdata} containing \code{S_units} matrices for the base ECC.  Default is "\code{S_units}".}

\item{q_colname}{the name of a column in \code{.sutdata} containing \code{q} matrices for the base ECC.  Default is "\code{q}".}

\item{C_colname}{the name of a column in \code{.sutdata} containing \code{C} matrices for the base ECC.  Default is "\code{C}".}

\item{eta_i_colname}{the name of a column in \code{.sutdata} containing \code{eta_i} vectors for the base ECC.  Default is "\code{eta_i}".}

\item{maxiter}{the maximum allowable number of iterations when calculating the effects of a new \code{R} matrix.
Default is 100.}

\item{tol}{the maximum allowable change in any one entry of the \code{U} and \code{V} matrices
from one iteration to the next. Default is 1e-6.}

\item{U_prime_colname}{the name of the output column that contains new Use (\code{U}) matrices.
Default is "\code{U_prime}".}

\item{V_prime_colname}{the name of the output column that contains new Make (\code{V}) matrices.
Default is "\code{V_prime}".}

\item{Y_Prime_colname}{the name of the output column that contains new Final Demand (\code{Y}) matrices.
Default is "\code{Y_prime}".}
}
\value{
\code{.sutdata} with additional columns \code{U_prime_colname}, \code{V_prime_colname}, and \code{Y_prime_colname}.
}
\description{
This function calculates the effect of changing the resources available to an energy conversion chain.
New versions of \code{U}, \code{V}, and \code{Y} matrices are returned
as \code{U_prime}, \code{V_prime}, and \code{Y_prime}.
This function assumes that each industry's inputs are perfectly-substitutable.
}
\details{
Inputs \code{U_colname}, \code{V_colname}, \code{Y_colname},
\code{S_units_colname}, \code{q_colname}, and \code{C_colname}
can be
conveniently calculated by the function \code{\link{calc_io_mats}};
\code{eta_i_colname} can be calculated with \code{\link{calc_eta_i}}.

Each industry must be unit-homogeneous on its inputs.
If not, \code{NA} is returned as the result for \code{U_prime}, \code{V_prime}, and \code{Y_prime}.
}
\examples{
library(dplyr)
library(matsbyname)
library(tidyr)
doubleR <- UKEnergy2000mats \%>\%
  spread(key = "matrix.name", value = "matrix") \%>\%
  # At present, UKEnergy2000mats has V matrices that are the sum of both V and R.
  # Change to use the R matrix.
  rename(
    V_plus_R = V
  ) \%>\%
  separate_RV() \%>\%
  # At this point, the matrices are they way we want them.
  # Calculate the input-output matrices which are inputs to the new_R function.
  calc_io_mats() \%>\%
  # Calculate the efficiency of every industry in the ECC.
  calc_eta_i() \%>\%
  # Make an R_prime matrix that gives twice the resource inputs to the economy.
  mutate(
    R_prime = elementproduct_byname(2, R)
  ) \%>\%
  # Now call the new_R function which will calculate
  # updated U, V, and Y matrices (U_prime, V_prime, and Y_prime)
  # given R_prime.
  # Each of the *_prime matrices should be 2x their originals,
  # because R_prime is 2x relative to R.
  # Rows with Last.stage == "services" are NA.
  new_R_ps()
}
